#!/usr/bin/perl

my $source="/mnt/source/fio";
my $target="/mnt/target/fio";

my @source_subv;
my @target_subv;

# only list read-only snapshots on source
my @sourcelist=`btrfs subvolume list -rs $source | grep snapshot | sed 's/^.*path //'`;
# only list read-only on target, but include NON-snapshots, since btrfs fulls aren't snapshots
my @targetlist=`btrfs subvolume list -r $target | grep snapshot | sed 's/^.*path //'`;

chomp @sourcelist;
chomp @targetlist;

# find most recent common snapshot
my $common='';
until ( ($common ne '') || (scalar @targetlist == 0) ) {
	my $targetsnap = pop @targetlist;
	my @matches = grep { /^$targetsnap$/ } @sourcelist;
	$common = $matches[0];
}

# find most recent snapshot on source
my $recent = pop @sourcelist;

# build in-order list of snapshots to replicate from source
my @sourcesnaps;
$sourcesnaps[0]=$recent;
my $snap;
until ($snap eq $common) {
	$snap = pop @sourcelist;
	push (@sourcesnaps,$snap); 
}


if ($common eq $recent) {
	print "Target already contains most recent source snapshot $recent, nothing to do.\n";
	exit 0;
}

if ($common eq '') {
	print "Target and source do not have any matching snapshots, cannot replicate!\n";
	exit 1;
}

print "Replicating from $common to $recent...\n";
my $parent = pop @sourcesnaps;
while (scalar @sourcesnaps) {
	my $child = pop @sourcesnaps;
	system ("btrfs send -p $source/$parent $source/$child | btrfs receive $target");
	$parent = $child;
}
